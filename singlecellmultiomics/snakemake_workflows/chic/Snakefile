from singlecellmultiomics.libraryDetection.sequencingLibraryListing import SequencingLibraryLister
from glob import glob
import collections
from singlecellmultiomics.utils import get_contig_list_from_fasta

"""
This workflow:
    Starts off from a folder containing fastq files
    - Detects libraries
    - Demultiplexes per library, automatically detecting the right barcodes
    - [trims] @ todo
    - Maps, sorts and indexes the reads per library
    - Deduplicates and identifies molecules
    - Creates QC plots
"""

configfile: "config.json"

# This code detects which libraries are present in the current folder:
l = SequencingLibraryLister()
LIBRARIES = l.detect(glob('*.fastq.gz'), merge='_')
# Flatten:
fastq_per_lib = collections.defaultdict(list)
for lib,lane_dict in LIBRARIES.items():
    for lane,read_dict in lane_dict.items():
        fastq_per_lib[lib] += read_dict['R1']
        fastq_per_lib[lib] += read_dict['R2']
libraries =  list( fastq_per_lib.keys() )
###

# Obtain contigs:
contigs = get_contig_list_from_fasta(config['reference_file'])
# If you are unhappy about the contigs SCMO provides decide on your own on the next line (uncomment):
# contigs = ['chr1','chr2']


def get_fastq_file_list(wildcards):
    # Obtain a list of fastq files associated to wildcards.library
    global libraries
    return sorted( fastq_per_lib[wildcards.library] )

def get_target_demux_list():
    global libraries
    targets = []
    for lib in libraries:
        targets.append('processed/' + lib + "/demultiplexedR1.fastq.gz" )
        targets.append('processed/' + lib + "/demultiplexedR2.fastq.gz" )
    return targets

def get_target_tagged_bam_list():
    return [f"processed/{library}/tagged.bam" for library in libraries]

rule all:
    input:
        # get_target_demux_list() use this for demux only
        get_target_tagged_bam_list()

rule SCMO_demux:
    input:
        fastqfiles = get_fastq_file_list
    output:
        "processed/{library}/demultiplexedR1.fastq.gz",
        "processed/{library}/demultiplexedR2.fastq.gz"
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 4000
    shell:
        "demux.py -merge _ {input.fastqfiles} -o processed --y"


rule map:
    input:
        ref=config['reference_file'],
        r1="processed/{library}/demultiplexedR1.fastq.gz",
        r2="processed/{library}/demultiplexedR2.fastq.gz"
    output:
        "processed/{library}/sorted.bam"
    threads: 8
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 8000
    run:
        if config.mapper=='bwa':
            shell(
                """bwa mem -t {threads} {input} |  samtools view -bS - | \
                samtools sort -@ {threads} -m 7G - -o {output}; samtools index {output}"""
                )
        elif config.mapper=='bowtie2':
            shell(
                """bowtie2 -p {threads} -q --no-unal --local --sensitive-local -N 1
                 -x {input.ref} -1 {input.r1} -2 {input.r2} | samtools view -Sb > processed/{library}/unsorted.bam;
                samtools sort -T processed/{library}/temp_sort -@ {threads} processed/{library}/unsorted.bam > processed/{library}/sorted.unfinished.bam;
                mv processed/{library}/sorted.unfinished.bam processed/{library}/sorted.bam; rm processed/{library}/unsorted.bam; samtools index {output}
                """
                )

rule SCMO_tagmultiome_ChiC_parallel_scatter:
    input:
        bam = "processed/{library}/sorted.bam"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 6000 # The amount of memory reqiored is dependent on wether alleles or consensus caller are used
    output:
        "processed/{library}/TEMP_CONTIG/{contig}.bam"
    shell:
        "bamtagmultiome.py -method chic -contig {wildcards.contig} {input.bam} -o {output}"


rule SCMO_tagmultiome_ChiC_parallel_gather:
    input:
        chr_bams =  expand("processed/{{library}}/TEMP_CONTIG/{contig}.bam", contig=contigs)
    threads: 1
    message:
        'Merging contig BAM files'
    output:
        "processed/{library}/tagged.bam"
    shell:
        "samtools merge -c {output} {input.chr_bams}; samtools index {output}"


rule SCMO_library_stats:
    threads: 1
    input:
        bam = "processed/{library}/tagged.bam"
    output:
        "processed/{library}/plots/ReadCount.png"
    shell:
        "libraryStatistics.py processed/{library} -tagged_bam /tagged.bam"


rule SCMO_count_table:
    input:
        bam = "processed/{library}/tagged.bam"
    output:
        "processed/{library}/count_table_{config.counting_bin_size}"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 8000
    shell:
        "bamToCountTable.py -bin {config.counting_bin_size} \
        -sliding {config.counting_sliding_increment} \
        -minMQ {config.counting_min_mq} \
        processed/{library} -tagged_bam /tagged.bam -sampleTags SM -joinedFeatureTags reference_name -binTag DS --dedup"
